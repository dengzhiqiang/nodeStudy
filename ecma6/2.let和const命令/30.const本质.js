// const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。
// 对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
// 但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。

const A = {};
A.name = 'deng';
A.getName = function () {
    console.log(this);
    console.log(this.name);
};

// { name: 'deng', getName: [Function] }
console.log(A);

// deng
A.getName();

// ，常量A储存的是一个地址，这个地址指向一个对象。
// 不可变的只是这个地址，即不能把A指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。

// 再次指向另外一个对象就会报错
// A = {}